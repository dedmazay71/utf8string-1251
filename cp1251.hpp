#pragma once
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
union _SOME { uint32_t ui=0; unsigned char uc[4]; };
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                   char -> wchar_t
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//     таблица wchar_t
inline constexpr 
const unsigned cp1251_2uni[128] = {            // char->wchar_t  (mb -> wc)
  /* 0x80 */
  0x0402, 0x0403, 0x201a, 0x0453, 0x201e, 0x2026, 0x2020, 0x2021, 0x20ac, 0x2030, 0x0409, 0x2039, 0x040a, 0x040c, 0x040b, 0x040f,
  /* 0x90 */
  0x0452, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014, 0x0098, 0x2122, 0x0459, 0x203a, 0x045a, 0x045c, 0x045b, 0x045f,
  /* 0xa0 */
  0x00a0, 0x040e, 0x045e, 0x0408, 0x00a4, 0x0490, 0x00a6, 0x00a7, 0x0401, 0x00a9, 0x0404, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x0407,
  /* 0xb0 */
  0x00b0, 0x00b1, 0x0406, 0x0456, 0x0491, 0x00b5, 0x00b6, 0x00b7, 0x0451, 0x2116, 0x0454, 0x00bb, 0x0458, 0x0405, 0x0455, 0x0457,
  /* 0xc0 */
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041a, 0x041b, 0x041c, 0x041d, 0x041e, 0x041f,
  /* 0xd0 */
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042a, 0x042b, 0x042c, 0x042d, 0x042e, 0x042f,
  /* 0xe0 */
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043a, 0x043b, 0x043c, 0x043d, 0x043e, 0x043f,
  /* 0xf0 */
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044a, 0x044b, 0x044c, 0x044d, 0x044e, 0x044f
};
//------------------------------------------------------------------------------------------------------------
//                                                                              char -> wchar_t
constexpr void cp1251_mbtowc(unsigned* pwc, const unsigned char c) {
  *pwc = (c < 0x80)?  (unsigned) c : (unsigned) cp1251_2uni[c-0x80];
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                wchar_t  =>  char
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// таблицы  ANSI кодов                                          // wc => mb  (wchar_t -> char)
inline constexpr 
const unsigned char cp1251_page04[] = {   // 9*16+2=146         //  wc >= 0x0400 && wc < 0x0498
  0x00, 0xa8, 0x80, 0x81, 0xaa, 0xbd, 0xb2, 0xaf, 0xa3, 0x8a, 0x8c, 0x8e, 0x8d, 0x00, 0xa1, 0x8f,
  0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
  0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
  0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
  0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
  0x00, 0xb8, 0x90, 0x83, 0xba, 0xbe, 0xb3, 0xbf, 0xbc, 0x9a, 0x9c, 0x9e, 0x9d, 0x00, 0xa2, 0x9f,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 60
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 70
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 80
  0xa5, 0xb4                                                                                       // 90
};

inline constexpr 
const unsigned char cp1251_page20[] = {                        //wc >= 0x2010 && wc < 0x2040
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x96, 0x97, 0x00, 0x00, 0x00, 0x91, 0x92, 0x82, 0x00, 0x93, 0x94, 0x84, 0x00,
  0x86, 0x87, 0x95, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x9b
};
//-----------------------------------------------------------------------------------------------------------
//                       // wc -> mb  wchar_t -> char
constexpr 
int cp1251_wctomb(unsigned char* const r, const unsigned wc) {
  unsigned char c = 0;

  uint8_t wc0 = (uint8_t)(wc >> 8);
  uint8_t wc1 = wc & 0x0ff;

  if(wc0 == 0x00) c = wc1;
  else
  if(wc0 == 0x04) c = cp1251_page04[ wc1 ] ;  // 146 = длина cp1251_page04
  else 
  if(wc0 == 0x20) {
    if(wc != 0x20ac) c = cp1251_page20[ wc1 ]; // 3b = 59 = длина cp1251_page20                 //-0x10 ];
    else c = 0x88;
  }
  else
  if(wc1 == 0x16) c = 0xb9;
  else   
  if(wc1 == 0x22) c = 0x99;
  else return -1;

  *r = c;
  return 1;
}//-----------------------------------------------------------------------------------------------------------
//                                                              // wc -> mb  wchar_t -> char
constexpr 
unsigned char cp1251_wctomb(const unsigned wc) {
  unsigned char c = 0;

  uint8_t wc0 = (uint8_t)(wc >> 8);
  uint8_t wc1 = wc & 0x0ff;

  if(wc0 == 0x00) c = wc1;
  else
  if(wc0 == 0x04) c = cp1251_page04[ wc1 ] ;
  else 
  if(wc0 == 0x20) {
    if(wc != 0x20ac) c = cp1251_page20[ wc1 ];//-0x10 ];
    else c = 0x88;
  }
  else
  if(wc1 == 0x16) c = 0xb9;
  else            c = 0x99;
  return c;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                      char => UTF8 symbol
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline constexpr unsigned cp1251_2utf8[] = {            // char->char8_t  (mb -> mb8)
  // 0x80
  0x00d082, 0x00d083, 0xe2809a, 0x00d193, 0xe2809e, 0xe280a6, 0xe280a0, 0xe280a1,
  0xe282ac, 0xe280b0, 0x00d089, 0xe280b9, 0x00d08a, 0x00d08c, 0x00d08b, 0x00d08f,  
  // 0x90
  0x00d192, 0xe28098, 0xe28099, 0xe2809c, 0xe2809d, 0xe280a2, 0xe28093, 0xe28094,
  0x00c298, 0xe284a2, 0x00d199, 0xe280ba, 0x00d19a, 0x00d19c, 0x00d19b, 0x00d19f,  
  // 0xa0
  0x00c2a0, 0x00d08e, 0x00d19e, 0x00d088, 0x00c2a4, 0x00d290, 0x00c2a6, 0x00c2a7,  
  0x00d081, 0x00c2a9, 0x00d084, 0x00c2ab, 0x00c2ac, 0x00c2ad, 0x00c2ae, 0x00d087,
  // 0xb0
  0x00c2b0, 0x00c2b1, 0x00d086, 0x00d196, 0x00d291, 0x00c2b5, 0x00c2b6, 0x00c2b7,  
  0x00d191, 0xe28496, 0x00d194, 0x00c2bb, 0x00d198, 0x00d085, 0x00d195, 0x00d197,
  // 0xc0
  0x00d090, 0x00d091, 0x00d092, 0x00d093, 0x00d094, 0x00d095, 0x00d096, 0x00d097,
  0x00d098, 0x00d099, 0x00d09a, 0x00d09b, 0x00d09c, 0x00d09d, 0x00d09e, 0x00d09f,
  // 0xd0
  0x00d0a0, 0x00d0a1, 0x00d0a2, 0x00d0a3, 0x00d0a4, 0x00d0a5, 0x00d0a6, 0x00d0a7,
  0x00d0a8, 0x00d0a9, 0x00d0aa, 0x00d0ab, 0x00d0ac, 0x00d0ad, 0x00d0ae, 0x00d0af,
  // 0xe0
  0x00d0b0, 0x00d0b1, 0x00d0b2, 0x00d0b3, 0x00d0b4, 0x00d0b5, 0x00d0b6, 0x00d0b7,
  0x00d0b8, 0x00d0b9, 0x00d0ba, 0x00d0bb, 0x00d0bc, 0x00d0bd, 0x00d0be, 0x00d0bf,
  // 0xf0
  0x00d180, 0x00d181, 0x00d182, 0x00d183, 0x00d184, 0x00d185, 0x00d186, 0x00d187,
  0x00d188, 0x00d189, 0x00d18a, 0x00d18b, 0x00d18c, 0x00d18d, 0x00d18e, 0x00d18f
};
//-------------------------------------------------------------------------------------------------------------          
//                          таблица cp1251  utf8 символов
//                                      Для char -> char8_t (u8string, utf8string)
//#pragma clang diagnostic push 
//#pragma clang diagnostic ignored "-Winvalid-source-encoding"

inline constexpr
const char8_t* const table_utf8 = 
u8"\0\1\2\3\4\5\6\7\x8\x9\xa\xb\xc\xd\xe\xf\x10"
u8"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
//u8"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя";
u8"\xd0\x82"  
u8"\xd0\x83"  
u8"\xe2\x80\x9a"
u8"\xd1\x93"
u8"\xe2\x80\x9e"
u8"\xe2\x80\xa6"
u8"\xe2\x80\xa0"
u8"\xe2\x80\xa1"
u8"\xe2\x82\xac"
u8"\xe2\x80\xb0"
u8"\xd0\x89"
u8"\xe2\x80\xb9"
u8"\xd0\x8a"
u8"\xd0\x8c"
u8"\xd0\x8b"
u8"\xd0\x8f"
u8"\xd1\x92"
u8"\xe2\x80\x98"
u8"\xe2\x80\x99"
u8"\xe2\x80\x9c"
u8"\xe2\x80\x9d"
u8"\xe2\x80\xa2"
u8"\xe2\x80\x93"
u8"\xe2\x80\x94"
u8"\xc2\x98"
u8"\xe2\x84\xa2"
u8"\xd1\x99"
u8"\xe2\x80\xba"
u8"\xd1\x9a"  
u8"\xd1\x9c"  
u8"\xd1\x9b"  
u8"\xd1\x9f"  
u8"\xc2\xa0"  
u8"\xd0\x8e"  
u8"\xd1\x9e"  
u8"\xd0\x88"  
u8"\xc2\xa4"  
u8"\xd2\x90"  
u8"\xc2\xa6"  
u8"\xc2\xa7"  
u8"\xd0\x81"  
u8"\xc2\xa9"  
u8"\xd0\x84"  
u8"\xc2\xab"  
u8"\xc2\xac"  
u8"\xc2\xad"  
u8"\xc2\xae"  
u8"\xd0\x87"  
u8"\xc2\xb0"  
u8"\xc2\xb1"  
u8"\xd0\x86"  
u8"\xd1\x96"  
u8"\xd2\x91"  
u8"\xc2\xb5"  
u8"\xc2\xb6"  
u8"\xc2\xb7"  
u8"\xd1\x91"  
u8"\xe2\x84\x96"
u8"\xd1\x94"
u8"\xc2\xbb"
u8"\xd1\x98"
u8"\xd0\x85"
u8"\xd1\x95"
u8"\xd1\x97"
u8"\xd0\x90"
u8"\xd0\x91"
u8"\xd0\x92"  
u8"\xd0\x93"  
u8"\xd0\x94"  
u8"\xd0\x95"  
u8"\xd0\x96"  
u8"\xd0\x97"  
u8"\xd0\x98"  
u8"\xd0\x99"  
u8"\xd0\x9a"  
u8"\xd0\x9b"  
u8"\xd0\x9c"  
u8"\xd0\x9d"  
u8"\xd0\x9e"  
u8"\xd0\x9f"  
u8"\xd0\xa0"  
u8"\xd0\xa1"  
u8"\xd0\xa2"  
u8"\xd0\xa3"  
u8"\xd0\xa4"  
u8"\xd0\xa5"  
u8"\xd0\xa6"  
u8"\xd0\xa7"  
u8"\xd0\xa8"  
u8"\xd0\xa9"  
u8"\xd0\xaa"  
u8"\xd0\xab"  
u8"\xd0\xac"  
u8"\xd0\xad"  
u8"\xd0\xae"  
u8"\xd0\xaf"  
u8"\xd0\xb0"  
u8"\xd0\xb1"  
u8"\xd0\xb2"  
u8"\xd0\xb3"  
u8"\xd0\xb4"  
u8"\xd0\xb5"  
u8"\xd0\xb6"  
u8"\xd0\xb7"  
u8"\xd0\xb8"  
u8"\xd0\xb9"  
u8"\xd0\xba"  
u8"\xd0\xbb"  
u8"\xd0\xbc"  
u8"\xd0\xbd"  
u8"\xd0\xbe"  
u8"\xd0\xbf"  
u8"\xd1\x80"  
u8"\xd1\x81"  
u8"\xd1\x82"  
u8"\xd1\x83"  
u8"\xd1\x84"  
u8"\xd1\x85"  
u8"\xd1\x86"  
u8"\xd1\x87"  
u8"\xd1\x88"  
u8"\xd1\x89"  
u8"\xd1\x8a"  
u8"\xd1\x8b"  
u8"\xd1\x8c"
u8"\xd1\x8d" 
u8"\xd1\x8e"
u8"\xd1\x8f";

//#pragma clang diagnostic pop 
//                          таблица длин и смещений в таблице cp1251 utf8 символов

struct Indexes_utf8 {
        unsigned    length{1};
        unsigned    pos{0};
};
inline constexpr 
Indexes_utf8 table_indexes[] = 
{
    {1,   0}, {1,   1}, {1,   2}, {1,   3}, {1,   4}, {1,   5}, {1,   6}, {1,   7}, {1,   8}, {1,   9}, 
    {1,  10}, {1,  11}, {1,  12}, {1,  13}, {1,  14}, {1,  15}, {1,  16}, {1,  17}, {1,  18}, {1,  19}, 
    {1,  20}, {1,  21}, {1,  22}, {1,  23}, {1,  24}, {1,  25}, {1,  26}, {1,  27}, {1,  28}, {1,  29}, 
    {1,  30}, {1,  31}, {1,  32}, {1,  33}, {1,  34}, {1,  35}, {1,  36}, {1,  37}, {1,  38}, {1,  39}, 
    {1,  40}, {1,  41}, {1,  42}, {1,  43}, {1,  44}, {1,  45}, {1,  46}, {1,  47}, {1,  48}, {1,  49}, 
    {1,  50}, {1,  51}, {1,  52}, {1,  53}, {1,  54}, {1,  55}, {1,  56}, {1,  57}, {1,  58}, {1,  59}, 
    {1,  60}, {1,  61}, {1,  62}, {1,  63}, {1,  64}, {1,  65}, {1,  66}, {1,  67}, {1,  68}, {1,  69}, 
    {1,  70}, {1,  71}, {1,  72}, {1,  73}, {1,  74}, {1,  75}, {1,  76}, {1,  77}, {1,  78}, {1,  79}, 
    {1,  80}, {1,  81}, {1,  82}, {1,  83}, {1,  84}, {1,  85}, {1,  86}, {1,  87}, {1,  88}, {1,  89}, 
    {1,  90}, {1,  91}, {1,  92}, {1,  93}, {1,  94}, {1,  95}, {1,  96}, {1,  97}, {1,  98}, {1,  99}, 
    {1, 100}, {1, 101}, {1, 102}, {1, 103}, {1, 104}, {1, 105}, {1, 106}, {1, 107}, {1, 108}, {1, 109}, 
    {1, 110}, {1, 111}, {1, 112}, {1, 113}, {1, 114}, {1, 115}, {1, 116}, {1, 117}, {1, 118}, {1, 119}, 
    {1, 120}, {1, 121}, {1, 122}, {1, 123}, {1, 124}, {1, 125}, {1, 126}, {1, 127}, {2, 128}, {2, 130}, 
    {3, 132}, {2, 135}, {3, 137}, {3, 140}, {3, 143}, {3, 146}, {3, 149}, {3, 152}, {2, 155}, {3, 157}, 
    {2, 160}, {2, 162}, {2, 164}, {2, 166}, {2, 168}, {3, 170}, {3, 173}, {3, 176}, {3, 179}, {3, 182}, 
    {3, 185}, {3, 188}, {2, 191}, {3, 193}, {2, 196}, {3, 198}, {2, 201}, {2, 203}, {2, 205}, {2, 207}, 
    {2, 209}, {2, 211}, {2, 213}, {2, 215}, {2, 217}, {2, 219}, {2, 221}, {2, 223}, {2, 225}, {2, 227}, 
    {2, 229}, {2, 231}, {2, 233}, {2, 235}, {2, 237}, {2, 239}, {2, 241}, {2, 243}, {2, 245}, {2, 247}, 
    {2, 249}, {2, 251}, {2, 253}, {2, 255}, {2, 257}, {3, 259}, {2, 262}, {2, 264}, {2, 266}, {2, 268}, 
    {2, 270}, {2, 272}, {2, 274}, {2, 276}, {2, 278}, {2, 280}, {2, 282}, {2, 284}, {2, 286}, {2, 288}, 
    {2, 290}, {2, 292}, {2, 294}, {2, 296}, {2, 298}, {2, 300}, {2, 302}, {2, 304}, {2, 306}, {2, 308}, 
    {2, 310}, {2, 312}, {2, 314}, {2, 316}, {2, 318}, {2, 320}, {2, 322}, {2, 324}, {2, 326}, {2, 328}, 
    {2, 330}, {2, 332}, {2, 334}, {2, 336}, {2, 338}, {2, 340}, {2, 342}, {2, 344}, {2, 346}, {2, 348}, 
    {2, 350}, {2, 352}, {2, 354}, {2, 356}, {2, 358}, {2, 360}, {2, 362}, {2, 364}, {2, 366}, {2, 368}, 
    {2, 370}, {2, 372}, {2, 374}, {2, 376}, {2, 378}, {2, 380}, {2, 382}, {2, 384}, {2, 386}, {2, 388}, 
    {2, 390}, {2, 392}, {2, 394}, {2, 396}, {2, 398}, {2, 400}
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                              utf8 symbol       =>     char
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline constexpr unsigned char cp1251_page20_8[] = {                  //  c8 >= c   mb8 -> mb
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 0x00, 0x00, 0x00, 0x96, 0x97, 0x00, 0xb9, 0x00,   // 0x00 - 0x07
 0x91, 0x92, 0x82, 0x00, 0x93, 0x94, 0x84, 0x00,   // 0x08 - 0x0f
 0x86, 0x87, 0x95, 0x00, 0x00, 0x00, 0x85, 0x00,   // 0x10 - 0x17
 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,   // 0x18 - 0x1f
 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x20 - 0x27
 0x00, 0x8b, 0x9b                                  // 0x28 - 0x2a
};

inline constexpr unsigned char cp1251_page04_8[] = {                  //  c8 >= c mb8 -> mb 
  0x00, 0xa8, 0x80, 0x81, 0xaa, 0xbd, 0xb2, 0xaf, // 0x00-0x07
  0xa3, 0x8a, 0x8c, 0x8e, 0x8d, 0x00, 0xa1, 0x8f, // 0x08-0x0f
  0x00, 0xb8, 0x90, 0x83, 0xba, 0xbe, 0xb3, 0xbf, // 0x10-0x17
  0xbc, 0x9a, 0x9c, 0x9e, 0x9d, 0x00, 0xa2, 0x9f, // 0x18-0x1f
  0xa5, 0xb4                                      // 0x20-0x21
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                      Для перекодировки символов utf8  в  cp1251 символы
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline constexpr unsigned char page_dc[3][64] = {
    {
        //d081   d082   d083   d084   d085   d086   d087   d088   d089   d08a   d08b   d08c   d08e   d08f
        //  a8 Ё   80 Ђ   81 Ѓ   aa Є   bd Ѕ   b2 І   af Ї   a3 Ј   8a Љ   8c Њ   8e Ћ   8d Ќ   a1 Ў   8f Џ
        0,0xa8,0x80,0x81,0xaa,0xbd,0xb2,0xaf,0xa3,0x8a,0x8c,0x8e,0x8d,0,0xa1,0x8f,    // 0-f                                 // 00-0f
        //0xd090, 0xd091, 0xd092, 0xd093, 0xd094, 0xd095, 0xd096, 0xd097,   // 10-17      А -
        //0xd098, 0xd099, 0xd09a, 0xd09b, 0xd09c, 0xd09d, 0xd09e, 0xd09f,   // 18-1f
        //0xd0a0, 0xd0a1, 0xd0a2, 0xd0a3, 0xd0a4, 0xd0a5, 0xd0a6, 0xd0a7,   // 20-27
        //0xd0a8, 0xd0a9, 0xd0aa, 0xd0ab, 0xd0ac, 0xd0ad, 0xd0ae, 0xd0af,   // 28-2f          Я
        //0xd0b0, 0xd0b1, 0xd0b2, 0xd0b3, 0xd0b4, 0xd0b5, 0xd0b6, 0xd0b7,   // 30-37      а - 
        //0xd0b8, 0xd0b9, 0xd0ba, 0xd0bb, 0xd0bc, 0xd0bd, 0xd0be, 0xd0bf,   // 38-3f          п
        0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,  // 10-1f
        0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,  // 20-2f
        0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef   // 30-3f
    },
    {
        //{0xd180, 0xd181, 0xd182, 0xd183, 0xd184, 0xd185, 0xd186, 0xd187,   // 40-47        р -
        // 0xd188, 0xd189, 0xd18a, 0xd18b, 0xd18c, 0xd18d, 0xd18e, 0xd18f,   // 48-4f            я
        0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,  // 0-f
        //d191,d192,d193,d194,d195,d196,d197,d198,d199,d19a,d19b,d19c,0, d19e,d19f
        0,0xb8,0x90,0x83,0xba,0xbe,0xb3,0xbf,0xbc,0x9a,0x9c,0x9e,0x9d,0,0xa2,0x9f,          // 10,11-1f
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,                                     
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0                                     
    },                                       
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,                                     // 0-f
        0xa5,0xb4,0,0,0,0,0,0,                                                     // 10-11 - 17
        //   98   a0    a4 ¤  a6 ¦  a7 §  a9 ©  ab «  ac ¬  ad ­  ae ®  b0 °  b1 ±  b5 µ  b6 ¶  b7 ·  bb »
        0x98,0,0,0,0,0,0,0,0xa0,0,0,0,0xa4,0,0xa6,0xa7,                      // 18-27
        0,0xa9,0,0xab,0xac,0xad,0xae,0,0xb0,0xb1,0,0,0,0xb5,0xb6,0xb7,         // 28-37
        0,0,0,0xbb,                                                           // 38-3b
        0, 0, 0, 0
    }
};

inline constexpr unsigned char page_e2[] = {
        0x00, 0x00, 0x00, 0x96, 0x97, 0x00, 0x00, 0xb9,   // 0x00 - 0x07
        0x91, 0x92, 0x82, 0x00, 0x93, 0x94, 0x84, 0x00,   // 0x08 - 0x0f
        0x86, 0x87, 0x95, 0x99, 0x00, 0x00, 0x85, 0x00,   // 0x10 - 0x17
        0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,   // 0x18 - 0x1f
        0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x20 - 0x27
        0x00, 0x8b, 0x9b                                  // 0x28 - 0x2a
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
constexpr 
unsigned cp1251_mb8tomb(unsigned char& c, const unsigned char* const p8) {    // c8 -> c  mb8 -> mb
    if(p8[0] <= 0x7f) { c = p8[0]; return 1; }
    const unsigned i = (p8[0]>>5) & 0xf9;           // 192 = C0     256 = 100
    // здесь i м.б. только 0 и 1
    // тестируется на 0x20  => 8x,   9x,   ax, bx, cx,  dx не проходят, а ex проходит
    //                0x03            c2 -> 02    d0 -> 00 d1 ->01 d2 -> 02
    if(i == 0) { c = page_dc[p8[0] & 0x03] [ (p8[1] - 0x80)]; return 2; }  // 1-ый индекс м.б. 3 (формально)
                                                                                  // 0x40 = 64 = длина page_dc[x]  
    else
    if(i == 1) { c = page_e2[((p8[1] & 0x04) >> 2)  | ((p8[2] & 0x3f) - 0x10)];   return 3; }
    return 4;
}
//---------------------------------------------------------------------------------------------------------
constexpr 
unsigned cp1251_mb8tomb(unsigned char* const r, const unsigned char* const p8) {    // c8 -> c  mb8 -> mb
    if(p8[0] <= 0x7f) { *r = p8[0]; return 1; }
    const unsigned i = (p8[0]>>5) & 0xf9;

    if(i == 0) { *r = page_dc[p8[0] & 0x03] [(p8[1] - 0x80)]; return 2; }   // 1-ый индекс м.б. 3 (формально)
    else
    if(i == 1)  
    { *r = page_e2[((p8[1] & 0x04) >> 2)  | ((p8[2] & 0x3f) - 0x10)];   return 3; }
    return 4;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

